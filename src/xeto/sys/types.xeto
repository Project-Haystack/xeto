//
// Copyright (c) 2022, Project-Haystack
// Licensed under the Academic Free License version 3.0
//
// History:
//   2 May 2022  Brian Frank  Creation
//

// Root type for all objects
Obj: <sealed, abstract>

// Self is a placeholder that always represents the parent type
Self: Obj <sealed>

// Scalar is an atomic value kind
Scalar: Obj <abstract>

// None is the bottom type used to represent absense of value
None: Scalar <sealed> "none"

// Marker labels a dict with typing information
Marker: Scalar <sealed> "marker"

// Not available indicates invalid or missing data
NA: Scalar <sealed> "na"

// Unicode string of characters
Str: Scalar <sealed> ""

// Boolean value either true or false
Bool: Scalar <sealed> "false"

// Integer or floating point numbers annotated with an optional unit
Number: Scalar <sealed> "0"

// Unitless integer number
Int: Number <sealed, unitless> "0"

// Unitless floating point number
Float: Number <sealed, unitless> "0"

// Number with a unit of time
Duration: Number <sealed, quantity:"time"> "0sec"

// Universal resource identifier
Uri: Scalar <sealed>  ""

// Reference to another dict.  The 'of' meta defines target type
Ref: Scalar <sealed, pattern: "[a-zA-Z\\d\\._~]*"> "x"

// Reference or list of references.  The 'of' meta defines target type.
// The value may be either a single ref or a list of refs.
MultiRef: Obj <sealed>

// Version string formatted as decimal digits separated by a dot
Version: Scalar <sealed, pattern: "\\d+(\\.\\d+)*"> "0"

// ISO 8601 date as year, month, day: '2011-06-07'
Date: Scalar <sealed, pattern: "\\d{4}-\\d{2}-\\d{2}"> "2000-01-01"

// ISO 8601 time as hour, minute, seconds: '09:51:27.354'
Time: Scalar <sealed, pattern: "\\d{2}:\\d{2}:\\d{2}(\\.\\d+)*"> "00:00:00"

// ISO 8601 timestamp followed by timezone identifier
DateTime: Scalar <sealed, pattern: "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)*[Z+-][\\d:]*[ ]*[-+a-zA-Z_\\d]*"> "2000-01-01T00:00:00Z UTC"

// Span models a time range between two DateTimes.
// It supports the following string encoding:
//   - relative 'SpanMode' name such as "yesterday"
//   - absolute single date: 'YYYY-MM-DD'
//   - absolute date span: 'YYYY-MM-DD,YYYY-MM-DD'
//   - absolute date time span: 'YYYY-MM-DDThh:mm:ss.FFF zzzz,YYYY-MM-DDThh:mm:ss.FFF zzzz'
// In the case of two DateTime, the timezones must match.  In the other
// cases the timezone to use is context sensitive based on the application.
Span: Scalar <sealed>

// Relative span to current date
SpanMode: Enum {
  today        // Current date
  yesterday    // Day before current date
  thisWeek     // Localized week which includes today
  lastWeek     // Localized week before thisWeek
  pastWeek     // Past 7 dates including today
  thisMonth    // Calendar month which includes today
  lastMonth    // Calendar month before thisMonth
  pastMonth    // Past 28 days including today
  thisQuarter  // Three month quarter which includes today
  lastQuarter  // Three month quarter before thisQuarter
  pastQuarter  // Past 90 days including today
  thisYear     // Calendar year which includes today
  lastYear     // Calendar year before thisYear
  pastYear     // Past 365 days including today
}

// Closed enumerated set of string values
Enum: Scalar

// Open enumerated taxonomy of marker tags
Choice: Dict

// Sequence is base type for all collections
Seq: Obj <abstract>

// Associative array of name/value pairs
Dict: Seq

// Ordered list of zero or more values
List: Seq <sealed>

// Two dimension table of columns and rows.
Grid: Seq <of:Dict>

// Or type is a choice between one of multiple types.
// It is a union of the set of types.
Or: Obj

// And type is a combination of multiple types.
// It is an intersection of the set of types.
And: Obj

// Blob of raw binary data in base64url encoding as specified by
// RFC 4648.  This encoding does not use padding and uses minus "-"
// and underbar "_" as the 62nd and 63 char respectively.
Buf: Scalar <sealed>

// Filter query string
Filter: Scalar <sealed>

// Query defines a named data set
Query: Dict <sealed>

// Function represents the signature of a computation with
// zero or more parameter types and one return type.  The 'returns'
// slot specifies the return type, and all other slots specify
// the parameters.
Func: Dict {
  returns: Obj?  // Return type of the function
}

// Top-level dicts with a unique identifier.
Entity: Dict <abstract> {
  id: Ref              // Unique identifier for entity in its project
  spec: Ref?<of:Spec>  // Type of this entity
}

// Entity that represents a file containing textual or binary data.
// Common MIME types are mapped to specs by the 'lib.files' library.
File: Entity

// Spec models a value specification
Spec: Dict

// Inferface is an object oriented API defined as set of named
// field and method slots.
Interface: Dict

// BuildVar is string macro from "build.props" injected at build time
BuildVar: Scalar

