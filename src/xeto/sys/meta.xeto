//
// Copyright (c) 2022, Project-Haystack
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jul 2022  Brian Frank  Creation
//

// Spec models a value specification
Spec: Dict {

  // Indicates an optional type
  maybe: Marker? <noInherit>

  // Default value for this slot
  val: Obj?

  // Item type for parameterized Seq/Query; target type for Ref/MultiRef
  of: Ref? <of:Spec>

  // Types used in compound types like And and Or
  ofs: List? <of:Ref<of:Spec>>

  // Documentation description
  doc: Str

  // Abstract types cannot be implemented directly by instance data
  abstract: Marker? <noInherit>

  // Sealed types cannot be extended outside of their own lib
  sealed: Marker? <noInherit>

  // Marks spec as undocumented and not officially supported
  nodoc: Marker?

  // Regex pattern for scalar string encoding
  pattern: Str?

  // Annotates a slot as a fixed value that must be equal to 'val'
  fixed: Marker?

  // Inclusive minimum value for numbers
  minVal: Self?

  // Inclusive maximum value for numbers
  maxVal: Self?

  // Restrict number or unit enum to specific unit
  unit: Unit?

  // Restrict number or unit enum to specific quantity
  quantity: UnitQuantity?

  // Applied to Choices to allow multiple selections
  multiChoice: Marker?

  // Applied to strings to require value is non-empty when trimmed of whitespace
  nonEmpty: Marker?

  // Applied to strings and lists to specify inclusive minimum length
  minSize: Int?

  // Applied to strings and lists to specify inclusive maximum length
  maxSize: Int?

  // Named path to traverse to execute query
  via: Str?

  // Inverse query to run against parent
  inverse: Str?
}

// Library module meta data
Lib: Dict {

  // Current version of the library
  version: Version

  // Library dependency
  depends: List <of:LibDepend>

  // Organization meta data for the library
  org: LibOrg
}

// Library dependency
LibDepend: Dict {
  lib: Str                      // Library qualified dotted name
  versions: LibDependVersions   // Version constraints for dependency
}

// Version constraints for a library dependency.
//
// The format is:
//   <versions>  :=  <wildcard> | <range>
//   <wildcard>  :=  <seg> "." <seg> "." <seg>
//   <range>     :=  <wildcard> "-" <wildcard>
//   <seg>       :=  <digits> | "x"
//
// Examples:
//   1.5.20           // match only 1.5.20
//   1.5.x            // match any patch version within 1.5
//   3.x.x            // match any version with 3 as major version
//   1.5.20 - 1.x.x   // greater than 1.5.20 and has 1 in major ver
LibDependVersions: Scalar

// Organization meta data
LibOrg: Dict {
  dis: Str     // Display name for the organization
  uri: Uri     // URI for organization website
}

