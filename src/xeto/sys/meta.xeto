//
// Copyright (c) 2022, Project-Haystack
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jul 2022  Brian Frank  Creation
//

// Abstract types cannot be implemented directly by instance data
abstract: Marker <meta, noInherit>

// Indicates an asynchronous operation or function call
async: Marker <meta>

// Indicates an immutable value
const: Marker <meta>

// Library dependencies
depends: List<meta, of:LibDepend>

// Documentation description
doc: Str <meta>

// Annotates a slot as a fixed value that must be equal to 'val'
fixed: Marker <meta>

// Inverse query to run against parent
inverse: Str <meta>

// String key; used in enums to define normalized string identifier
key: Str <meta>

// License [SPDX name](https://spdx.org/licenses/) or "commerical"
license: Str <meta>

// Applied to strings and lists to specify inclusive maximum length
maxSize: Int <meta>

// Inclusive maximum value for numbers
maxVal: Self <meta>

// Indicates an optional type
maybe: Marker <meta>

// Marks a global slot as a meta data tag
meta: Marker <meta>

// Applied to strings and lists to specify inclusive minimum length
minSize: Int <meta>

// Inclusive minimum value for numbers
minVal: Self <meta>

// Applied to Choices to allow multiple selections
multiChoice: Marker <meta>

// Indicates a constructor function
new: Marker <meta>

// Marks spec as undocumented and not officially supported
nodoc: Marker <meta>

// Marks a function or operation as having no side effects. The function may
// or may not be pure in that calling it multiple times with the same arguments
// always evaluates to the same result.
noSideEffects: Marker <meta>

// Indicates a meta tag that is not inherited into subtypes
noInherit: Marker <meta>

// Applied to strings to require value is non-empty when trimmed of whitespace
nonEmpty: Marker <meta>

// Item type for parameterized Seq/Query; target type for Ref/MultiRef
of: Ref <meta, of:Spec>

// Types used in compound types like And and Or
ofs: List <meta, of:Ref<of:Spec>>

// Library organization information
org: LibOrg <meta>

// Regex pattern for scalar string encoding
pattern: Str <meta>

// Restrict number or unit enum to specific quantity
quantity: UnitQuantity <meta>

// Indicates a readonly value that may not be written (but may mutate)
readonly: Marker <meta>

// Sealed types cannot be extended outside of their own lib. If used
// on a interface slot, the slot cannot be overridden in a subtype.
sealed: Marker <meta, noInherit>

// Indicates a spec level slot versus an instance level slot
static: Marker <meta>

// Mark data as summary level for display in summarized tables and other views
summary: Marker <meta>

// Free form category tags
categories: List <meta, of:Str>

// Indicates data which should be persisted
transient: Unit <meta>

// Restrict number or unit enum to specific unit
unit: Unit <meta>

// Restrict a number to have no unit
unitless: Marker <meta>

// Default value for this slot
val: Obj <meta>

// Library version control system metadata
vcs: LibVcs <meta>

// Version number
version: Version <meta>

// Named path to traverse to execute query
via: Str <meta>

// Used on a interface non-static slot to indicate it can be overridden subtypes
virtual: Marker <meta>

